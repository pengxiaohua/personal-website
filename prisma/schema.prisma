// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  openId       String   @unique
  unionId      String?
  nickname     String?
  avatarUrl    String?
  gender       Int?
  country      String?
  province     String?
  city         String?
  language     String?
  role         String   @default("user")
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  books        Book[]
  records      ReadingRecord[]
}

model Book {
  id            String           @id @default(uuid())
  isbn          String           @unique
  title         String
  author        String
  userId        String
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  publisher     String?
  publishDate   String?
  publishPlace  String?
  price         String?
  cover         String?
  summary       String?
  pages         Int?
  category      String?
  clcCode       String?
  binding       String?
  language      String?
  format        String?
  edition       String?
  words         String?

  progress      ReadingProgress?
  records       ReadingRecord[]

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([userId, isbn])
}

model ReadingRecord {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId      String
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookTitle   String
  bookAuthor  String
  page        Int
  date        DateTime
  timestamp   BigInt

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([bookId])
  @@index([userId, date])
  @@index([date])
}

model ReadingProgress {
  id             String   @id @default(uuid())
  bookId         String   @unique
  book           Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  totalPages     Int?
  currentPage    Int      @default(0)
  progressPercent Int?
  lastCheckInAt  DateTime?
  checkInCount   Int?     @default(0)
  isCompleted    Boolean? @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
